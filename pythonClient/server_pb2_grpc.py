# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import server_pb2 as server__pb2


class validateCredentialsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.validateCredentials = channel.unary_unary(
                '/org.bankatm.grpc.validateCredentialsService/validateCredentials',
                request_serializer=server__pb2.validateCredentialsRequest.SerializeToString,
                response_deserializer=server__pb2.validateCredentialsResponse.FromString,
                )


class validateCredentialsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def validateCredentials(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_validateCredentialsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'validateCredentials': grpc.unary_unary_rpc_method_handler(
                    servicer.validateCredentials,
                    request_deserializer=server__pb2.validateCredentialsRequest.FromString,
                    response_serializer=server__pb2.validateCredentialsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.bankatm.grpc.validateCredentialsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class validateCredentialsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def validateCredentials(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bankatm.grpc.validateCredentialsService/validateCredentials',
            server__pb2.validateCredentialsRequest.SerializeToString,
            server__pb2.validateCredentialsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class getAccountBalanceServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getAccountBalance = channel.unary_unary(
                '/org.bankatm.grpc.getAccountBalanceService/getAccountBalance',
                request_serializer=server__pb2.getAccountBalanceRequest.SerializeToString,
                response_deserializer=server__pb2.getAccountBalanceResponse.FromString,
                )


class getAccountBalanceServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getAccountBalance(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_getAccountBalanceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getAccountBalance': grpc.unary_unary_rpc_method_handler(
                    servicer.getAccountBalance,
                    request_deserializer=server__pb2.getAccountBalanceRequest.FromString,
                    response_serializer=server__pb2.getAccountBalanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.bankatm.grpc.getAccountBalanceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class getAccountBalanceService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getAccountBalance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bankatm.grpc.getAccountBalanceService/getAccountBalance',
            server__pb2.getAccountBalanceRequest.SerializeToString,
            server__pb2.getAccountBalanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class depositServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.deposit = channel.unary_unary(
                '/org.bankatm.grpc.depositService/deposit',
                request_serializer=server__pb2.depositRequest.SerializeToString,
                response_deserializer=server__pb2.depositResponse.FromString,
                )


class depositServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def deposit(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_depositServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'deposit': grpc.unary_unary_rpc_method_handler(
                    servicer.deposit,
                    request_deserializer=server__pb2.depositRequest.FromString,
                    response_serializer=server__pb2.depositResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.bankatm.grpc.depositService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class depositService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def deposit(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bankatm.grpc.depositService/deposit',
            server__pb2.depositRequest.SerializeToString,
            server__pb2.depositResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class withdrawServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.withdraw = channel.unary_unary(
                '/org.bankatm.grpc.withdrawService/withdraw',
                request_serializer=server__pb2.withdrawRequest.SerializeToString,
                response_deserializer=server__pb2.withdrawResponse.FromString,
                )


class withdrawServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def withdraw(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_withdrawServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'withdraw': grpc.unary_unary_rpc_method_handler(
                    servicer.withdraw,
                    request_deserializer=server__pb2.withdrawRequest.FromString,
                    response_serializer=server__pb2.withdrawResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.bankatm.grpc.withdrawService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class withdrawService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def withdraw(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.bankatm.grpc.withdrawService/withdraw',
            server__pb2.withdrawRequest.SerializeToString,
            server__pb2.withdrawResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
